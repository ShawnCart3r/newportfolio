{"version":3,"sources":["Component/Navbar.js","section/Main.js","section/About.js","section/Work.js","section/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","className","activeclass","to","smooth","offset","duration","Component","Main","id","About","Work","href","target","Contact","download","class","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QAgDeA,E,4MA5CXC,MAAQ,G,uDAEJ,OACI,yBAAKC,UAAU,UACnB,4BACA,4BAAI,kBAAC,OAAD,CACJC,YAAY,SACZC,GAAG,OACHC,QAAQ,EACRC,OAAQ,EACRC,SAAW,KALP,QAAJ,KAUR,4BAAI,kBAAC,OAAD,CACIJ,YAAY,SACZC,GAAG,QACHC,QAAQ,EACRC,OAAQ,EACRC,SAAW,KALf,UAQK,4BAAI,kBAAC,OAAD,CACLJ,YAAY,SACZC,GAAG,OACHC,QAAQ,EACRC,OAAQ,EACRC,SAAW,KALN,SAQL,4BAAI,kBAAC,OAAD,CACJJ,YAAY,SACZC,GAAG,UACHC,QAAQ,EACRC,OAAQ,EACRC,SAAW,KALP,kB,GAhCSC,aCWNC,E,4MAXXR,MAAQ,G,uDAEJ,OACA,yBAAKC,UAAU,eAAeQ,GAAG,QACnC,wBAAIR,UAAU,aAAd,6BAAoD,6BAApD,8C,GALaM,aCiBJG,E,4MAdXV,MAAQ,G,uDAEJ,OAAO,yBAAKC,UAAU,gBAAgBQ,GAAG,SACzC,sCAEA,uDAA4B,6BAA5B,oGACyF,6BADzF,8D,GANYF,aCaLI,E,4MAfXX,MAAQ,G,uDAEJ,OAAO,yBAAKC,UAAU,eAAeQ,GAAG,QACxC,oCACA,0FAEoD,6BAE5D,uBAAGG,KAAK,+CAA+CC,OAAO,UAA9D,8BAJQ,IAI8F,6BACtG,uBAAGD,KAAK,oCAAoCC,OAAO,UAAnD,yC,GAVmBN,aCkBJO,E,4MAjBXd,MAAQ,G,uDAEJ,OAAO,yBAAKC,UAAU,kBAAkBQ,GAAG,WAC3C,uCACA,iDACmB,4BADnB,kIAEuH,6BAFvH,kDAKgB,uBAAGG,KAAK,mCAAmCG,UAAQ,GAAnD,MALhB,kCAKyG,6BACjH,uBAAGH,KAAK,kDAAkDI,MAAM,aAAhE,aANQ,IAMkF,6BANlF,0C,GALcT,aCwBPU,G,6KAbX,OACE,yBAAKhB,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GARYM,cCEEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7a14e36e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {Link} from \"react-scroll\"\r\n\r\nclass Navbar extends Component {\r\n    state = {};\r\n    render (){\r\n        return (\r\n            <div className=\"navbar\">\r\n        <ul>\r\n        <li><Link\r\n        activeclass=\"active\"\r\n        to=\"main\"\r\n        smooth={true}\r\n        offset={0}\r\n        duration= {500}\r\n        >Main</Link> </li>\r\n\r\n\r\n\r\n<li><Link\r\n        activeclass=\"active\"\r\n        to=\"about\"\r\n        smooth={true}\r\n        offset={0}\r\n        duration= {500}\r\n        >About</Link></li> \r\n\r\n         <li><Link\r\n        activeclass=\"active\"\r\n        to=\"work\"\r\n        smooth={true}\r\n        offset={0}\r\n        duration= {500}\r\n        >Work</Link></li>    \r\n          \r\n        <li><Link\r\n        activeclass=\"active\"\r\n        to=\"contact\"\r\n        smooth={true}\r\n        offset={0}\r\n        duration= {500}\r\n        >Contact</Link></li>  \r\n       </ul>\r\n    </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React, {Component} from 'react'\r\n\r\nclass Main extends Component {\r\n    state = {};\r\n    render() {\r\n        return (\r\n        <div className=\"main-section\" id=\"main\" >\r\n      <h1 className=\"container\"> Hello, I am Shawn Carter <br/> I am an aspiring Front End Developer</h1>\r\n        </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Main;\r\n","\r\n\r\nimport React, { Component } from 'react'\r\n\r\nclass About extends Component {\r\n    state = {};\r\n    render() {\r\n        return <div className=\"about-section\" id=\"about\">\r\n        <h2> About</h2>\r\n\r\n        <p> Hello I'm Shawn Carter. <br/>\r\nI'm an aspiring self taught front end developer who enjoys the puzzles that coding has to offer. <br/>\r\nThis portfolio will have the projects im working on. </p>\r\n        \r\n        </div>\r\n        \r\n    }\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from 'react'\r\nclass Work extends Component {\r\n    state = {};\r\n    render() {\r\n        return <div className=\"work-section\" id=\"work\"> \r\n        <h2>Work</h2>\r\n        <p> \r\n\r\nThis section contains the current projects I am working on. <br/>\r\n\r\n<a href=\"https://inspiring-liskov-b6a293.netlify.app/\" target=\"_blank\">Weather App Built in React</a> <br/>\r\n<a href=\"https://matchthehero.netlify.app/\" target=\"_blank\">Match the Hero of the Imperuim!</a>\r\n</p>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Work;","import React, { Component } from 'react'\r\nclass Contact extends Component {\r\n    state = {};\r\n    render() {\r\n        return <div className=\"contact-section\" id=\"contact\"> \r\n        <h2>Contact</h2>\r\n        <p>\r\n        I live in Vermont. <b/>\r\nWhen I'm not practicing my front end skills, I spend my free time at the gym, playing Warhammer 40k, Magic: The Gathering, and <br/>\r\nwriting short stories.\r\n\r\nIf you'd like to see my <a href=\"./image/Resume- Shawn Carter.pdf\" download>CV</a> or feel free to get in touch. <br/>\r\n<a href=\"https://github.com/ShawnCart3r?tab=repositories\" class=\"text-dark\">My Github</a> <br/>\r\nEmail me at: shawncar3r@gmail.com \r\n        </p>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Contact;","import React, { Component} from 'react';\nimport Navbar from \"./Component/Navbar\";\nimport Main from \"./section/Main\";\nimport About from \"./section/About\";\nimport Work from \"./section/Work\";\nimport Contact from \"./section/Contact\";\n\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Navbar/>\n      <Main/>\n      <About/>\n      <Work/>\n      <Contact/>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}